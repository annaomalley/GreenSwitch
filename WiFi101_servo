#include <SPI.h>
#include <WiFi101.h>
#include <Servo.h> // servo library

int servoPin = 9;
Servo myServo;
boolean lit = true;

int sCCW = 180;
int sCW = 0;
int sStop = 95;
char c;

char ssid[] = "privateNetwork"; //  your network SSID (name)
char pass[] = "dontUseMyWifi";    // your network password (use for WPA, or use as key for WEP)
//int keyIndex = 0;            // your network key Index number (needed only for WEP)

int status = WL_IDLE_STATUS;
// if you don't want to use DNS (and reduce your sketch size)
// use the numeric IP instead of the name for the server:
//IPAddress server(74,125,232,128);  // numeric IP for Google (no DNS)
//char server[] = "www.greenswitch.0fees.us";    // name address for Google (using DNS)
//char server[] = "http://greenswitch.altervista.org/";
IPAddress server(78, 129, 205, 40);

// Initialize the Ethernet client library
// with the IP address and port of the server
// that you want to connect to (port 80 is default for HTTP):
WiFiClient client;

void setup() {
  pinMode(servoPin, OUTPUT); // digital pin is an output pin
  myServo.attach(servoPin); //
  
  //Initialize serial and wait for port to open:
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // check for the presence of the shield:
  if (WiFi.status() == WL_NO_SHIELD) {
    Serial.println("WiFi shield not present");
    // don't continue:
    while (true);
  }

  // attempt to connect to Wifi network:
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to SSID: ");
    Serial.println(ssid);
    // Connect to WPA/WPA2 network. Change this line if using open or WEP network:
    status = WiFi.begin(ssid, pass);

    // wait 10 seconds for connection:
    delay(10000);
  }
  Serial.println("Connected to wifi");
 printWifiStatus();


}

void loop() {

    Serial.println("\nStarting connection to server...");
  // if you get a connection, report back via serial:
  if (client.connect(server, 80)) {
    Serial.println("connected to server");
    // Make a HTTP request:
    //    client.println("GET /OnOff.html HTTP/1.1");
    //    client.println("Host: www.greenswitch.0fees.us");
    client.println("GET /OnOff.html HTTP/1.1");
    client.println("Host: www.greenswitch.altervista.org");
    client.println("Connection: close");
    client.println();
  }

  
  // if there are incoming bytes available
  // from the server, read them and print them:
  while (client.available()) {
    //for (int i=0;i<200;i++) {
    c = client.read();
    //}
    //client.stop();
  }
      Serial.print("This is c: ");
      Serial.print(c);

  // if the server's disconnected, stop the client:
  if (!client.connected()) {
    //Serial.println();
    //Serial.println("disconnecting from server.");
    client.stop();
  }
  
  myServo.write(sStop);


  if (lit && c == '@') {
    Serial.print("TURN OFF");
    myServo.write(sCW);
    delay(160); 
    myServo.write(sStop);
    lit = false;
  }

  else if (!lit && c == '$') {
    Serial.print("TURN ON");
    myServo.write(sCCW);
    delay(160); 
    myServo.write(sStop);
    lit = true;
  }
}

void printWifiStatus() {
  // print the SSID of the network you're attached to:
  //Serial.print("SSID: ");
  //Serial.println(WiFi.SSID());

  // print your WiFi shield's IP address:
  IPAddress ip = WiFi.localIP();
  //Serial.print("IP Address: ");
  //Serial.println(ip);

  // print the received signal strength:
  long rssi = WiFi.RSSI();
  //Serial.print("signal strength (RSSI):");
  //Serial.print(rssi);
  //Serial.println(" dBm");
}
